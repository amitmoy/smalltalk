Morph subclass: #Card	instanceVariableNames: 'value symbol cover'	classVariableNames: ''	poolDictionaries: ''	category: 'WAR-CARDGAME'!!Card methodsFor: 'as yet unclassified' stamp: 'd 1/26/2021 13:29'!coverCard			(cover=nil)ifTrue:[cover:= ImageMorph new newForm:((ImageReadWriter formFromFileNamed:'pics\cardBack.png') magnifyBy:0.185).	color:= Color transparent.	self addMorph: cover.	cover center: self center.].! !!Card methodsFor: 'as yet unclassified' stamp: 'd 1/26/2021 13:28'!dispose	"graphicly dispose the card image"	(cover isMemberOf: ImageMorph) ifTrue:[self removeMorph: cover.											cover:=nil.											self changed.]	! !!Card methodsFor: 'as yet unclassified' stamp: 'init 1/22/2021 18:01'!getValue	"returns self value"	^value.! !!Card methodsFor: 'as yet unclassified' stamp: 'init 1/23/2021 14:57'!initialize	"to init the morph image of the card"	super initialize.! !!Card methodsFor: 'as yet unclassified' stamp: 'init 1/22/2021 18:03'!isEqual: aCard	"return is self value equal to aCard value"	^value = aCard getValue.! !!Card methodsFor: 'as yet unclassified' stamp: 'init 1/22/2021 18:02'!isGreaterThen: aCard	"returns true if this self value is greater then aCard value"	^value > aCard getValue.! !!Card methodsFor: 'as yet unclassified' stamp: 's 1/26/2021 14:56'!moveTo: pos	"comment stating purpose of message"	| xDiff yDiff timeStamp|		xDiff:= pos x - self position x.	yDiff:= pos y - self position y.	timeStamp:=35.		timeStamp timesRepeat:[(Delay forMilliseconds:10) wait.					self position: self position + ((xDiff/timeStamp)@(yDiff/timeStamp))].! !!Card methodsFor: 'as yet unclassified' stamp: 'init 1/23/2021 15:50'!setVal: val symbol: sym	"set the instance values symbol and value"	|cardImage imageFileName|		value:= val.	symbol:= sym.		imageFileName:= 'pics\',((sym * 13)+val) asString,'.png'.	cardImage:= ImageMorph new newForm:((ImageReadWriter formFromFileNamed:imageFileName) magnifyBy:1).	color:= Color transparent.	self addMorph: cardImage.	cardImage center: self center.	cover:= ImageMorph new newForm:((ImageReadWriter formFromFileNamed:'pics\cardBack.png') magnifyBy:0.185).	color:= Color transparent.	self addMorph: cover.	cover center: self center.	! !Morph subclass: #CardsCollection	instanceVariableNames: 'count cards maxNumOfCards textMorph'	classVariableNames: ''	poolDictionaries: ''	category: 'WAR-CARDGAME'!!CardsCollection methodsFor: 'as yet unclassified' stamp: 's 1/26/2021 14:58'!add: aCard	"insert a card to cards collection"		|cardBackImage|		(count=0) ifTrue:[	cardBackImage:= ImageMorph new newForm:((ImageReadWriter formFromFileNamed:'pics\cardBack.png') magnifyBy:0.185).	self addMorph: cardBackImage.	cardBackImage center: self center.].		(count<maxNumOfCards) ifTrue:[	count:= count + 1.	textMorph contents: (count asString).	cards addLast: aCard].! !!CardsCollection methodsFor: 'as yet unclassified' stamp: 'init 1/25/2021 15:20'!clear	"clear the cardscollection"	count:=0.	cards do:[:card| card coverCard.].	cards removeAll.! !!CardsCollection methodsFor: 'as yet unclassified' stamp: 'init 1/23/2021 16:46'!disposeTop	"dispose the top card"		(count > 0) ifTrue:[(cards at: count) dispose.						self changed.]! !!CardsCollection methodsFor: 'as yet unclassified' stamp: 'init 1/25/2021 14:45'!getCards	"return cards"	^cards.! !!CardsCollection methodsFor: 'as yet unclassified' stamp: 'init 1/23/2021 16:06'!getCount	"returns the card collection count"	^count.! !!CardsCollection methodsFor: 'as yet unclassified' stamp: 's 1/26/2021 14:42'!initialize	"initialize the cards collection and count variables"		super initialize.	maxNumOfCards:=100.	cards:= OrderedCollection new.	count:=0.	color:= Color transparent.	textMorph:= TextMorph new.	textMorph position: self position + (80@0).	textMorph contents: (count asString).	self addMorph: textMorph.! !!CardsCollection methodsFor: 'as yet unclassified' stamp: 'init 1/23/2021 16:16'!lookTop	"returns the value of the top of the collection"	(count>0) ifTrue:[^(cards at: count) getValue].! !!CardsCollection methodsFor: 'as yet unclassified' stamp: 'init 1/25/2021 14:00'!merge: cardsCol	"merge cardsCol into cards collection"		cardsCol do:[:card | cards add: card.].	cardsCol clear.! !!CardsCollection methodsFor: 'as yet unclassified' stamp: 'init 1/23/2021 12:58'!print	"prints the deck content"	Transcript show:'The deck content:';cr.	(1 to: count) do: [:i| Transcript show: (cards at: i) getValue; cr ].! !!CardsCollection methodsFor: 'as yet unclassified' stamp: 's 1/26/2021 14:37'!pull	"pull the last card from the collection"	|returnCard|		(count>0) ifTrue:[returnCard:=cards at: count.						count:=count-1.						textMorph contents: (count asString).						cards remove: returnCard.						(count = 0) ifTrue:[self removeAllMorphs].						^returnCard.]				ifFalse:[^nil].	! !!CardsCollection methodsFor: 'as yet unclassified' stamp: 'init 1/23/2021 12:54'!shuffleCards	"shuffle the cards"		|rand tmp randomNum|		rand := Random new.	(count>1) ifTrue:[(1 to: count) do:[:i| tmp:= cards at: i.											randomNum:= rand nextInt: count.											cards at: i put: (cards at: randomNum).											cards at: randomNum put: tmp.].]		! !CardsCollection subclass: #Deck	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'WAR-CARDGAME'!!Deck methodsFor: 'as yet unclassified' stamp: 'init 1/23/2021 14:21'!initialize	"initialize a regular deck"	|tmp|	super initialize.	(0 to: 3) do: [:sym | (0 to: 12) do: [:val | tmp:= Card new setVal:val symbol:sym.												self add: tmp.]].! !Morph subclass: #WarGame	instanceVariableNames: 'activePlayers playersAtWar deck gameOver mouseIn'	classVariableNames: ''	poolDictionaries: ''	category: 'WAR-CARDGAME'!!WarGame methodsFor: 'as yet unclassified' stamp: 's 1/26/2021 14:22'!declareWinner: player	"finish the game and declare winner"	|answer|	gameOver:=true.	answer:=FillInTheBlank request: player getName,' is the winner type yes to create new game' initialAnswer:'yes'.	(answer = 'yes') ifTrue:[self initialize] ifFalse:[self abandon.].! !!WarGame methodsFor: 'as yet unclassified' stamp: 'init 1/25/2021 12:19'!getActivePlayers	"comment stating purpose of message"	^activePlayers.! !!WarGame methodsFor: 'as yet unclassified' stamp: 'init 1/25/2021 14:10'!getRoundWinner: activePlayers	"return the winner of the round"	|maxValHolder|		maxValHolder := activePlayers at: 1.	activePlayers do:[:player | (maxValHolder attackValue < player attackValue) ifTrue:[ maxValHolder:= player].].	^maxValHolder.! !!WarGame methodsFor: 'as yet unclassified' stamp: 'init 1/25/2021 13:43'!getWarStatePlayers: activePlayers	"returns the players which in war state"		| result |	result:= (activePlayers select:[:player | player isInWarState: activePlayers]) asOrderedCollection.	^result.	! !!WarGame methodsFor: 'as yet unclassified' stamp: 'd 1/26/2021 13:33'!handlesMouseDown: anEvent	^true.! !!WarGame methodsFor: 'as yet unclassified' stamp: 'init 1/26/2021 13:11'!handlesMouseOver: anEvent		^true.! !!WarGame methodsFor: 'as yet unclassified' stamp: 's 1/26/2021 14:57'!initialize	| player playerPointer numOfPlayers|	super initialize.	color:= Color gray.	self extent:(700@400).	self openInWorld.	numOfPlayers:=0.	[(numOfPlayers = nil)ifFalse:[								(numOfPlayers>4 or: numOfPlayers<2)]							ifTrue:[true.]] whileTrue:[numOfPlayers:= (FillInTheBlank request:'Choose number of players between 2 and 4?' initialAnswer:'2') asInteger.	Transcript show: 'num is'; show: numOfPlayers;cr.].	activePlayers:= OrderedCollection new: numOfPlayers.	(1 to: numOfPlayers) do:[:i | |playerName|									playerName:=FillInTheBlank request:'Whats the name of player number?',i initialAnswer:'players name'.									playerPointer:= WarPlayer new initialize:playerName.									playerPointer position: self position + ((120+(150*(i-1))@300)).									self addMorph: playerPointer.									activePlayers add: playerPointer.].	deck:= Deck new.	deck shuffleCards.	player:=0.	[deck getCount > 0] whileTrue:[ Transcript show: player;cr.		(activePlayers at: (player+1)) drawCard: (deck pull).		player:= (player + 1) rem: numOfPlayers.].	mouseIn:=false.	gameOver:=false.	self playGame.		! !!WarGame methodsFor: 'as yet unclassified' stamp: 'init 1/26/2021 12:57'!initialize: numberOfPlayers	| player playerPointer numOfPlayers|	super initialize.	self extent:(700@400).	self openInWorld.	numOfPlayers:= FillInTheBlank request:'Choose number of players between 2 and 4?' initialAnswer:'2'.	color:= Color gray.	activePlayers:= OrderedCollection new: numberOfPlayers.	(1 to: numberOfPlayers) do:[:i | playerPointer:= WarPlayer new initialize:'ho'.									playerPointer position: self position + ((120+(150*(i-1))@300)).									self addMorph: playerPointer.									activePlayers add: playerPointer.].	deck:= Deck new.	player:=0.	[deck getCount > 0] whileTrue:[ Transcript show: player;cr.		(activePlayers at: (player+1)) drawCard: (deck pull).		player:= (player + 1) rem: numberOfPlayers.]		! !!WarGame methodsFor: 'as yet unclassified' stamp: 'init 1/25/2021 13:15'!isInWarState: players	"check if there is war state"	! !!WarGame methodsFor: 'as yet unclassified' stamp: 's 1/26/2021 14:39'!mouseDown: anEvent	(anEvent redButtonPressed) ifTrue:[	(gameOver) ifFalse:[		[self round]fork.]].(anEvent yellowButtonPressed) ifTrue:[gameOver:=true.	self abandon.]! !!WarGame methodsFor: 'as yet unclassified' stamp: 's 1/26/2021 14:11'!mouseEnter: anEvent	mouseIn:=true.! !!WarGame methodsFor: 'as yet unclassified' stamp: 's 1/26/2021 14:11'!mouseLeave: anEvent	mouseIn:=false.! !!WarGame methodsFor: 'as yet unclassified' stamp: 's 1/26/2021 14:56'!playGame[[gameOver] whileFalse:[	(mouseIn)ifFalse:[		self round].	(Delay forMilliseconds:500) wait.].]fork.	! !!WarGame methodsFor: 'as yet unclassified' stamp: 'init 1/25/2021 15:01'!playersPullCard	"each active player will pull card"		activePlayers do: [:player | player pullRegular].! !!WarGame methodsFor: 'as yet unclassified' stamp: 'init 1/25/2021 15:00'!round	"play a round"	| winner roundWinner|		"check the active players"	activePlayers := activePlayers select:[:player| player numOfCards > 0].		"checks if there is a winner"	(activePlayers size = 1) ifTrue:[ winner := activePlayers at: 1.									self declareWinner: winner.].		self playersPullCard.		[playersAtWar:= self getWarStatePlayers: activePlayers.	playersAtWar size > 1.] whileTrue:[ self solveWarState: playersAtWar.].		roundWinner := (self getRoundWinner: activePlayers).		roundWinner takePlayersHand: activePlayers.	! !!WarGame methodsFor: 'as yet unclassified' stamp: 'init 1/25/2021 14:05'!solveWarState: warStatePlayers	"pull cards for warStatePlayers untill it solved"		((warStatePlayers select:[:player| player numOfCards > 0]) size = 0) ifTrue:[ warStatePlayers do: [:player | player takeBackHand.]].	warStatePlayers do: [:player | player pullWar].		! !Morph subclass: #WarPlayer	instanceVariableNames: 'hand deck name'	classVariableNames: ''	poolDictionaries: ''	category: 'WAR-CARDGAME'!!WarPlayer methodsFor: 'as yet unclassified' stamp: 'init 1/23/2021 16:19'!attackValue	"return the attack value."	^hand lookTop.! !!WarPlayer methodsFor: 'as yet unclassified' stamp: 'init 1/25/2021 15:06'!clearHand		"Clear all the submorphs except deck"		self submorphs do:[:i | (i isMemberOf: Card) ifTrue:[self removeMorph: i.]. ].	hand clear.! !!WarPlayer methodsFor: 'as yet unclassified' stamp: 'init 1/23/2021 16:46'!dispose	"dispose the last card on hand"	hand disposeTop.	self changed.! !!WarPlayer methodsFor: 'as yet unclassified' stamp: 'init 1/23/2021 16:26'!drawCard: aCard	"draw card to deck"		deck add: aCard.! !!WarPlayer methodsFor: 'as yet unclassified' stamp: 'init 1/25/2021 14:14'!getHand	"returns the player hand"	^hand.! !!WarPlayer methodsFor: 'as yet unclassified' stamp: 's 1/26/2021 14:15'!getName	^name.! !!WarPlayer methodsFor: 'as yet unclassified' stamp: 'init 1/23/2021 16:35'!initialize	"init player's deck"	super initialize.	color:= Color transparent.	deck:= CardsCollection new.	hand:= CardsCollection new.	self addMorph: deck.	deck position: self position.	! !!WarPlayer methodsFor: 'as yet unclassified' stamp: 'init 1/26/2021 12:56'!initialize: aName	"init player's deck"	|textMorph|	super initialize.	color:= Color transparent.	deck:= CardsCollection new.	hand:= CardsCollection new.	self addMorph: deck.	name:=aName.	textMorph:= aName asString asMorph.	textMorph position: self position + (0@(65)).	self addMorph: textMorph.	deck position: self position.	! !!WarPlayer methodsFor: 'as yet unclassified' stamp: 'init 1/24/2021 15:44'!isInWarState: activePlayers	"comment stating purpose of message"	activePlayers do:[:player | (player==self) ifFalse:[(self attackValue = player attackValue)														ifTrue:[^true]]].	^false.! !!WarPlayer methodsFor: 'as yet unclassified' stamp: 'init 1/25/2021 13:07'!numOfCards	"return the number of cards in deck"	^ deck getCount.! !!WarPlayer methodsFor: 'as yet unclassified' stamp: 'init 1/25/2021 15:21'!pullCard	"Pulls card from the deck"	|aCard|	(deck getCount > 0) ifTrue:[aCard:=deck pull.								aCard position: self position.								self addMorph: aCard.								aCard moveTo: self position + (0@(-100)).								hand add: aCard.]		! !!WarPlayer methodsFor: 'as yet unclassified' stamp: 'init 1/25/2021 15:01'!pullRegular	"regular pull card (non war state)"		self pullCard.	self dispose.! !!WarPlayer methodsFor: 'as yet unclassified' stamp: 'init 1/25/2021 15:14'!pullWar	"pull 3 cards and dispose the last"	self pullCard; pullCard; pullCard; dispose.! !!WarPlayer methodsFor: 'as yet unclassified' stamp: 'init 1/25/2021 14:38'!takeBackHand	"merges the hand collection into deck"	self takeHand: self.! !!WarPlayer methodsFor: 'as yet unclassified' stamp: 's 1/26/2021 15:01'!takeHand: aPlayer	"takes a player hand"	|playerCards |	playerCards:=(aPlayer getHand).	[playerCards getCount > 0] whileTrue:[|aCard| aCard:=playerCards pull.													aCard moveTo:(deck position).													deck add: aCard.													aCard coverCard.].	aPlayer clearHand.	deck shuffleCards.! !!WarPlayer methodsFor: 'as yet unclassified' stamp: 'init 1/25/2021 14:42'!takePlayersHand: activePlayers	"merge cards from other player hands"	activePlayers do:[:player| self takeHand: player].	! !